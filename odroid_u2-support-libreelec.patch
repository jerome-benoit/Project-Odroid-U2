diff --git a/config/graphic b/config/graphic
index 79ad74a..c149380 100644
--- a/config/graphic
+++ b/config/graphic
@@ -12,7 +12,7 @@ fi
 
 get_graphicdrivers() {
   if [ "$GRAPHIC_DRIVERS" = "all" ]; then
-    GRAPHIC_DRIVERS="i915 i965 r200 r300 r600 nvidia vmware virtualbox"
+    GRAPHIC_DRIVERS="armsoc i915 i965 r200 r300 r600 nvidia vmware virtualbox"
   fi
 
   for drv in $GRAPHIC_DRIVERS; do
@@ -77,5 +77,10 @@ get_graphicdrivers() {
 #      LLVM_SUPPORT="yes"
     fi
 
+    if [ "$drv" = "armsoc" ]; then
+      XORG_DRIVERS="$XORG_DRIVERS armsoc"
+      COMPOSITE_SUPPORT="yes"
+    fi
+
   done
 }
diff --git a/packages/devel/libcec/package.mk b/packages/devel/libcec/package.mk
index 71871a3..b36607c 100644
--- a/packages/devel/libcec/package.mk
+++ b/packages/devel/libcec/package.mk
@@ -55,6 +55,12 @@ else
   PKG_CMAKE_OPTS_TARGET="$PKG_CMAKE_OPTS_TARGET -DHAVE_AOCEC_API=0 -DHAVE_AMLOGIC_API=0"
 fi
 
+if [ "$KODIPLAYER_DRIVER" = "odroid-mfc" ]; then
+  PKG_CMAKE_OPTS_TARGET="$PKG_CMAKE_OPTS_TARGET -DHAVE_EXYNOS_API=1"
+else
+  PKG_CMAKE_OPTS_TARGET="$PKG_CMAKE_OPTS_TARGET -DHAVE_EXYNOS_API=0"
+fi
+
 pre_configure_target() {
   if [ "$KODIPLAYER_DRIVER" = "bcm2835-firmware" ]; then
     export CXXFLAGS="$CXXFLAGS \
diff --git a/packages/devel/libcec/udev.d/50-cec.rules b/packages/devel/libcec/udev.d/50-cec.rules
new file mode 100644
index 0000000..31251c6
--- /dev/null
+++ b/packages/devel/libcec/udev.d/50-cec.rules
@@ -0,0 +1 @@
+KERNEL=="CEC", MODE="0660"
diff --git a/packages/graphics/libdrm/package.mk b/packages/graphics/libdrm/package.mk
index db29a1a..35f45c7 100644
--- a/packages/graphics/libdrm/package.mk
+++ b/packages/graphics/libdrm/package.mk
@@ -36,6 +36,7 @@ get_graphicdrivers
 
 DRM_CONFIG="--disable-libkms --disable-intel --disable-radeon --disable-amdgpu"
 DRM_CONFIG="$DRM_CONFIG --disable-nouveau --disable-vmwgfx"
+DRM_CONFIG="$DRM_CONFIG --disable-exynos-experimental-api"
 
 for drv in $GRAPHIC_DRIVERS; do
   [ "$drv" = "i915" -o "$drv" = "i965" ] && \
@@ -50,6 +51,10 @@ for drv in $GRAPHIC_DRIVERS; do
   [ "$drv" = "vmware" ] && \
     DRM_CONFIG=`echo $DRM_CONFIG | sed -e 's/disable-libkms/enable-libkms/'` && \
     DRM_CONFIG=`echo $DRM_CONFIG | sed -e 's/disable-vmwgfx/enable-vmwgfx/'`
+
+  [ "$drv" = "armsoc" ] && \
+    DRM_CONFIG=`echo $DRM_CONFIG | sed -e 's/disable-libkms/enable-libkms/'` && \
+    DRM_CONFIG=`echo $DRM_CONFIG | sed -e 's/disable-exynos/enable-exynos/'`
 done
 
 PKG_CONFIGURE_OPTS_TARGET="--disable-udev \
diff --git a/packages/graphics/mesa/package.mk b/packages/graphics/mesa/package.mk
index 9254954..9e5c8c8 100644
--- a/packages/graphics/mesa/package.mk
+++ b/packages/graphics/mesa/package.mk
@@ -110,7 +110,7 @@ pre_configure_target() {
 }
 
 post_makeinstall_target() {
-  # rename and relink for cooperate with nvidia drivers
+  # rename and relink to cooperate with nvidia drivers
     rm -rf $INSTALL/usr/lib/libGL.so
     rm -rf $INSTALL/usr/lib/libGL.so.1
     ln -sf libGL.so.1 $INSTALL/usr/lib/libGL.so
diff --git a/packages/graphics/opengl-mali/package.mk b/packages/graphics/opengl-mali/package.mk
index bf3bffb..e02090a 100644
--- a/packages/graphics/opengl-mali/package.mk
+++ b/packages/graphics/opengl-mali/package.mk
@@ -17,13 +17,15 @@
 ################################################################################
 
 PKG_NAME="opengl-mali"
-PKG_VERSION="20130520"
+PKG_VERSION="4412_r5p0_x11"
+PKG_DEPENDS_TARGET="toolchain"
+PKG_URL="http://people.piment-noir.org/~fraggle/download/odroid/$PKG_NAME-$PKG_VERSION.tar.xz"
+PKG_DEPENDS_TARGET="$PKG_DEPENDS_TARGET libXfixes libXrender libXcomposite libxcb"
+PKG_SOURCE_DIR="${PKG_NAME}-${PKG_VERSION}"
 PKG_REV="1"
 PKG_ARCH="arm"
 PKG_LICENSE="nonfree"
-PKG_SITE="http://www.arm.com/products/multimedia/mali-graphics-hardware/mali-400-mp.php"
-PKG_URL="$DISTRO_SRC/$PKG_NAME-$PKG_VERSION.tar.xz"
-PKG_DEPENDS_TARGET="toolchain"
+PKG_SITE="http://www.arm.com/products/multimedia/mali-gpu/ultra-low-power/mali-400.php"
 PKG_SECTION="graphics"
 PKG_SHORTDESC="opengl-mali: OpenGL-ES and Mali driver for Mali 400 GPUs"
 PKG_LONGDESC="opengl-mali: OpenGL-ES and Mali driver for Mali 400 GPUs"
@@ -39,16 +41,40 @@ makeinstall_target() {
   mkdir -p $SYSROOT_PREFIX/usr/include
     cp -PR src/include/* $SYSROOT_PREFIX/usr/include
 
+  # EGL pkgconfig definition is needed since Kodi Krypton
+  mkdir -p $SYSROOT_PREFIX/usr/lib/pkgconfig
+    cat > $SYSROOT_PREFIX/usr/lib/pkgconfig/egl.pc <<\ \ \ \ EoF
+prefix=/usr
+exec_prefix=${prefix}
+libdir=${prefix}/lib/
+includedir=${prefix}/include
+
+Name: EGL
+Description: EGL
+Version: @PKG_VERSION@
+Requires:
+Libs: -L${libdir} -lEGL
+Cflags: -I${includedir}/EGL
+    EoF
+    sed -i "s/@PKG_VERSION@/$PKG_VERSION/" $SYSROOT_PREFIX/usr/lib/pkgconfig/egl.pc
+
+  # cleanup packaged unused links
+  rm -f libEGL.so.1
+  rm -f libEGL.so.1.4
+  rm -f libGLESv1_CM.so
+  rm -f libGLESv1_CM.so.1
+  rm -f libGLESv1_CM.so.1.1
+  rm -f libGLESv2.so.2
+  rm -f libGLESv2.so.2.0
+
   mkdir -p $SYSROOT_PREFIX/usr/lib
-    cp -PR src/lib/*.so* $SYSROOT_PREFIX/usr/lib
-    ln -sf libEGL.so.1.4 $SYSROOT_PREFIX/usr/lib/libEGL.so
-    ln -sf libGLESv1_CM.so.1.1 $SYSROOT_PREFIX/usr/lib/libGLESv1_CM.so
-    ln -sf libGLESv2.so.2.0 $SYSROOT_PREFIX/usr/lib/libGLESv2.so
+    cp -PR *.so* $SYSROOT_PREFIX/usr/lib
+    ln -sf libMali.so $SYSROOT_PREFIX/usr/lib/libEGL.so
+    ln -sf libMali.so $SYSROOT_PREFIX/usr/lib/libGLESv2.so
 
   mkdir -p $INSTALL/usr/lib
-    cp -PR src/lib/*.so* $INSTALL/usr/lib
-    ln -sf libEGL.so.1.4 $INSTALL/usr/lib/libEGL.so
-    ln -sf libGLESv1_CM.so.1.1 $INSTALL/usr/lib/libGLESv1_CM.so
-    ln -sf libGLESv2.so.2.0 $INSTALL/usr/lib/libGLESv2.so
+    cp -PR *.so* $INSTALL/usr/lib
+    ln -sf libMali.so $INSTALL/usr/lib/libEGL.so
+    ln -sf libMali.so $INSTALL/usr/lib/libGLESv2.so
 }
 
diff --git a/packages/graphics/opengl-mali/system.d/xorg.service b/packages/graphics/opengl-mali/system.d/xorg.service
new file mode 100644
index 0000000..3194170
--- /dev/null
+++ b/packages/graphics/opengl-mali/system.d/xorg.service
@@ -0,0 +1,17 @@
+[Unit]
+Description=Xorg Server
+Before=graphical.target kodi.service
+Requires=xorg-configure@mali.service
+After=xorg-configure@mali.service multi-user.target
+ConditionKernelCommandLine=!installer
+
+[Service]
+Type=notify
+EnvironmentFile=-/run/libreelec/debug/xorg.conf
+ExecStart=/usr/bin/xorg-launch -nolisten tcp vt01 $XORG_DEBUG
+Restart=always
+RestartSec=2
+StartLimitInterval=0
+
+[Install]
+WantedBy=graphical.target
diff --git a/packages/linux-firmware/samsung-firmware/package.mk b/packages/linux-firmware/samsung-firmware/package.mk
new file mode 100644
index 0000000..c0324e7
--- /dev/null
+++ b/packages/linux-firmware/samsung-firmware/package.mk
@@ -0,0 +1,45 @@
+################################################################################
+#      This file is part of OpenELEC - http://www.openelec.tv
+#      Copyright (C) 2009-2014 Stephan Raue (stephan@openelec.tv)
+#
+#  OpenELEC is free software: you can redistribute it and/or modify
+#  it under the terms of the GNU General Public License as published by
+#  the Free Software Foundation, either version 2 of the License, or
+#  (at your option) any later version.
+#
+#  OpenELEC is distributed in the hope that it will be useful,
+#  but WITHOUT ANY WARRANTY; without even the implied warranty of
+#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#  GNU General Public License for more details.
+#
+#  You should have received a copy of the GNU General Public License
+#  along with OpenELEC.  If not, see <http://www.gnu.org/licenses/>.
+################################################################################
+
+PKG_NAME="samsung-firmware"
+PKG_VERSION="20141026.0e5f637"
+PKG_REV="1"
+PKG_ARCH="any"
+PKG_LICENSE=""
+PKG_SITE="http://git.kernel.org/cgit/linux/kernel/git/firmware/linux-firmware.git"
+PKG_URL="http://people.piment-noir.org/~fraggle/download/odroid/$PKG_NAME-$PKG_VERSION.tar.xz"
+PKG_DEPENDS_TARGET="toolchain"
+PKG_PRIORITY="optional"
+PKG_SECTION="firmware"
+PKG_SHORTDESC="samsung-firmware: firmwares for various samsung devices"
+PKG_LONGDESC="samsung-firmware: firmwares for various samsung devices"
+
+PKG_IS_ADDON="no"
+PKG_AUTORECONF="no"
+
+make_target() {
+  : # nothing todo
+}
+
+makeinstall_target() {
+  mkdir -p $INSTALL/usr/lib/firmware/s5p-mfc
+    cp -R * $INSTALL/usr/lib/firmware
+    for fw in s5p-* ; do
+      ln -sf ../${fw} $INSTALL/usr/lib/firmware/s5p-mfc/${fw}
+    done
+}
diff --git a/packages/linux/package.mk b/packages/linux/package.mk
index 55ffaa0..48a6919 100644
--- a/packages/linux/package.mk
+++ b/packages/linux/package.mk
@@ -57,6 +57,11 @@ case "$LINUX" in
     PKG_URL="$DISTRO_SRC/$PKG_SOURCE_NAME"
     PKG_DEPENDS_TARGET="$PKG_DEPENDS_TARGET imx6-status-led imx6-soc-fan irqbalanced"
     ;;
+  mfc-3.8)
+    PKG_COMMIT="ddfddf8"
+    PKG_VERSION="${PKG_COMMIT}"
+    PKG_URL="https://github.com/hardkernel/linux/archive/$PKG_VERSION.tar.gz"
+    ;;
   *)
     PKG_VERSION="4.9.3"
     PKG_URL="http://www.kernel.org/pub/linux/kernel/v4.x/$PKG_NAME-$PKG_VERSION.tar.xz"
@@ -242,6 +247,11 @@ makeinstall_init() {
 }
 
 post_install() {
+  case $PROJECT in
+    Odroid_U2)
+      ln -sfn /storage/.config/smsc95xx_mac_addr $INSTALL/etc/smsc95xx_mac_addr
+    ;;
+  esac
   mkdir -p $INSTALL/usr/lib/firmware/
     ln -sf /storage/.config/firmware/ $INSTALL/usr/lib/firmware/updates
 
diff --git a/packages/mediacenter/kodi/package.mk b/packages/mediacenter/kodi/package.mk
index b818cf6..769c117 100644
--- a/packages/mediacenter/kodi/package.mk
+++ b/packages/mediacenter/kodi/package.mk
@@ -199,6 +199,9 @@ if [ ! "$KODIPLAYER_DRIVER" = default ]; then
     CXXFLAGS="$CXXFLAGS -DHAS_IMXVPU -DLINUX -DEGL_API_FB"
   elif [ "$KODIPLAYER_DRIVER" = libamcodec ]; then
     KODI_PLAYER="-DENABLE_AML=ON"
+  elif [ "$KODIPLAYER_DRIVER" = odroid-mfc ]; then
+    PKG_DEPENDS_TARGET="${PKG_DEPENDS_TARGET/ $KODIPLAYER_DRIVER/}"
+    KODI_PLAYER="-DENABLE_MFC=ON"
   fi
 fi
 
diff --git a/packages/tools/dtc/package.mk b/packages/tools/dtc/package.mk
index a558731..77eb56c 100644
--- a/packages/tools/dtc/package.mk
+++ b/packages/tools/dtc/package.mk
@@ -36,3 +36,7 @@ makeinstall_target() {
   mkdir -p $INSTALL/usr/bin
     cp -P $ROOT/$PKG_BUILD/dtc $INSTALL/usr/bin
 }
+
+makeinstall_host() {
+  make install PREFIX=$ROOT/$TOOLCHAIN
+}
diff --git a/packages/tools/u-boot/package.mk b/packages/tools/u-boot/package.mk
index a9c686e..13190b6 100644
--- a/packages/tools/u-boot/package.mk
+++ b/packages/tools/u-boot/package.mk
@@ -18,20 +18,32 @@
 
 PKG_NAME="u-boot"
 PKG_DEPENDS_TARGET="toolchain"
-if [ "$UBOOT_VERSION" = "imx6-cuboxi" ]; then
-  PKG_VERSION="imx6-408544d"
-  PKG_SITE="http://imx.solid-run.com/wiki/index.php?title=Building_the_kernel_and_u-boot_for_the_CuBox-i_and_the_HummingBoard"
-  # https://github.com/SolidRun/u-boot-imx6.git
-  PKG_URL="$DISTRO_SRC/$PKG_NAME-$PKG_VERSION.tar.xz"
-  [ -n "$UBOOT_CONFIG_V2" ] && PKG_DEPENDS_TARGET="toolchain u-boot-v2"
-elif [ "$UBOOT_VERSION" = "hardkernel" ]; then
-  PKG_VERSION="6e4e886"
-  PKG_SITE="https://github.com/hardkernel/u-boot"
-  PKG_URL="https://github.com/hardkernel/u-boot/archive/$PKG_VERSION.tar.gz"
-  PKG_DEPENDS_TARGET="$PKG_DEPENDS_TARGET gcc-linaro-aarch64-elf:host gcc-linaro-arm-eabi:host"
-else
-  exit 0
-fi
+case "$UBOOT_VERSION" in
+  "imx6-cuboxi")
+    PKG_VERSION="imx6-408544d"
+    PKG_SITE="http://imx.solid-run.com/wiki/index.php?title=Building_the_kernel_and_u-boot_for_the_CuBox-i_and_the_HummingBoard"
+    # https://github.com/SolidRun/u-boot-imx6.git
+    PKG_URL="$DISTRO_SRC/$PKG_NAME-$PKG_VERSION.tar.xz"
+    [ -n "$UBOOT_CONFIG_V2" ] && PKG_DEPENDS_TARGET="toolchain u-boot-v2"
+    ;;
+  "hardkernel")
+    PKG_VERSION="6e4e886"
+    PKG_SITE="https://github.com/hardkernel/u-boot"
+    PKG_URL="https://github.com/hardkernel/u-boot/archive/$PKG_VERSION.tar.gz"
+    PKG_DEPENDS_TARGET="$PKG_DEPENDS_TARGET gcc-linaro-aarch64-elf:host gcc-linaro-arm-eabi:host"
+    ;;
+  "mainline"|*)
+    PKG_VERSION="2016.11"
+    PKG_SITE="http://www.denx.de/wiki/U-Boot/WebHome"
+    PKG_URL="ftp://ftp.denx.de/pub/u-boot/u-boot-$PKG_VERSION.tar.bz2"
+    PKG_DEPENDS_TARGET="$PKG_DEPENDS_TARGET dtc:host"
+    ;;
+esac
+case "$PROJECT" in
+  "Odroid_U2")
+    PKG_DEPENDS_TARGET="$PKG_DEPENDS_TARGET odroid-u2-bootloader"
+    ;;
+esac
 PKG_REV="1"
 PKG_ARCH="arm aarch64"
 PKG_LICENSE="GPL"
@@ -58,8 +70,9 @@ pre_configure_target() {
   MAKEFLAGS=-j1
 
 # copy compiler-gcc5.h to compiler-gcc6. for fake building
-  cp include/linux/compiler-gcc5.h include/linux/compiler-gcc6.h
-
+  if [ "$UBOOT_VERSION" != "mainline" ]; then
+    cp include/linux/compiler-gcc5.h include/linux/compiler-gcc6.h
+  fi
 }
 
 make_target() {
@@ -130,15 +143,34 @@ makeinstall_target() {
 
   cp -PR $PROJECT_DIR/$PROJECT/bootloader/uEnv*.txt $INSTALL/usr/share/bootloader 2>/dev/null || :
 
+  mk_u-boot_splash()
+  {
+  if [ -f $PROJECT_DIR/$PROJECT/splash/boot-logo.bmp.gz ]; then
+    cp -PRv $PROJECT_DIR/$PROJECT/splash/boot-logo.bmp.gz $INSTALL/usr/share/bootloader
+  elif [ -f $DISTRO_DIR/$DISTRO/splash/boot-logo.bmp.gz ]; then
+    cp -PRv $DISTRO_DIR/$DISTRO/splash/boot-logo.bmp.gz $INSTALL/usr/share/bootloader
+  fi
+  }
+
   case $PROJECT in
     Odroid_C2)
       cp -PRv $PKG_DIR/scripts/update-c2.sh $INSTALL/usr/share/bootloader/update.sh
       cp -PRv $ROOT/$PKG_BUILD/u-boot.bin $INSTALL/usr/share/bootloader/u-boot
-      if [ -f $PROJECT_DIR/$PROJECT/splash/boot-logo.bmp.gz ]; then
-        cp -PRv $PROJECT_DIR/$PROJECT/splash/boot-logo.bmp.gz $INSTALL/usr/share/bootloader
-      elif [ -f $DISTRO_DIR/$DISTRO/splash/boot-logo.bmp.gz ]; then
-        cp -PRv $DISTRO_DIR/$DISTRO/splash/boot-logo.bmp.gz $INSTALL/usr/share/bootloader
+      mk_u-boot_splash
+      ;;
+    Odroid_U2)
+      # FIXME: this code path is more specific to mainline u-boot version than a project
+      if [ -f "$ROOT/$PKG_BUILD/u-boot-dtb.bin" ]; then
+        cp -PRv $ROOT/$PKG_BUILD/u-boot-dtb.bin $INSTALL/usr/share/bootloader/u-boot
+      elif [ -f "$ROOT/$PKG_BUILD/u-boot.bin" ]; then
+        cp -PRv $ROOT/$PKG_BUILD/u-boot.bin $INSTALL/usr/share/bootloader/u-boot
+      elif [ -f "$ROOT/$PKG_BUILD/sd_fuse/u-boot.bin" ]; then
+        cp -PRv $ROOT/$PKG_BUILD/sd_fuse/u-boot.bin $INSTALL/usr/share/bootloader/u-boot
+      elif [ -f "$ROOT/$PKG_BUILD/build/u-boot.bin" ]; then
+        cp -PRv $ROOT/$PKG_BUILD/build/u-boot.bin $INSTALL/usr/share/bootloader/u-boot
       fi
+      cp -PRv $PKG_DIR/scripts/update-u2.sh $INSTALL/usr/share/bootloader/update.sh
+      mk_u-boot_splash
       ;;
     imx6)
       cp -PRv $PKG_DIR/scripts/update.sh $INSTALL/usr/share/bootloader
diff --git a/packages/tools/u-boot/release b/packages/tools/u-boot/release
index 6787a2f..b2c4782 100755
--- a/packages/tools/u-boot/release
+++ b/packages/tools/u-boot/release
@@ -37,14 +37,28 @@ mkdir -p $RELEASE_DIR/3rdparty/bootloader
 
   cp -PR $BUILD/linux-*/arch/$TARGET_KERNEL_ARCH/boot/dts/*.dtb $RELEASE_DIR/3rdparty/bootloader 2>/dev/null || :
 
+  mk_u-boot_splash()
+  {
+  if [ -f $PROJECT_DIR/$PROJECT/splash/boot-logo.bmp.gz ]; then
+    cp -PR $PROJECT_DIR/$PROJECT/splash/boot-logo.bmp.gz $RELEASE_DIR/3rdparty/bootloader
+  elif [ -f $DISTRO_DIR/$DISTRO/splash/boot-logo.bmp.gz ]; then
+    cp -PR $DISTRO_DIR/$DISTRO/splash/boot-logo.bmp.gz $RELEASE_DIR/3rdparty/bootloader
+  fi
+  }
+
   case $PROJECT in
     Odroid_C2)
       cp -PR $BUILD/$BOOTLOADER-*/u-boot.bin $RELEASE_DIR/3rdparty/bootloader/u-boot
       cp -PR $PROJECT_DIR/$PROJECT/bootloader/boot.ini $RELEASE_DIR/3rdparty/bootloader
-      if [ -f $PROJECT_DIR/$PROJECT/splash/boot-logo.bmp.gz ]; then
-        cp -PR $PROJECT_DIR/$PROJECT/splash/boot-logo.bmp.gz $RELEASE_DIR/3rdparty/bootloader
-      elif [ -f $DISTRO_DIR/$DISTRO/splash/boot-logo.bmp.gz ]; then
-        cp -PR $DISTRO_DIR/$DISTRO/splash/boot-logo.bmp.gz $RELEASE_DIR/3rdparty/bootloader
-      fi
+      mk_u-boot_splash
+      ;;
+    Odroid_U2)
+      cp -PR $BUILD/$BOOTLOADER-*/u-boot.bin $RELEASE_DIR/3rdparty/bootloader/u-boot
+      for blob in $INSTALL/usr/share/bootloader/* ; do
+        cp -PR $blob $RELEASE_DIR/3rdparty/bootloader 2>/dev/null || :
+      done
+      cp -PR $PROJECT_DIR/$PROJECT/bootloader/boot.ini $RELEASE_DIR/3rdparty/bootloader
+      cp -PR $PROJECT_DIR/$PROJECT/bootloader/u-boot-fuse $RELEASE_DIR/3rdparty/bootloader
+      mk_u-boot_splash
       ;;
   esac
diff --git a/packages/tools/u-boot/scripts/update-u2.sh b/packages/tools/u-boot/scripts/update-u2.sh
new file mode 100644
index 0000000..42e6760
--- /dev/null
+++ b/packages/tools/u-boot/scripts/update-u2.sh
@@ -0,0 +1,73 @@
+#!/bin/sh
+
+################################################################################
+#      This file is part of OpenELEC - http://www.openelec.tv
+#      Copyright (C) 2009-2014 Stephan Raue (stephan@openelec.tv)
+#
+#  OpenELEC is free software: you can redistribute it and/or modify
+#  it under the terms of the GNU General Public License as published by
+#  the Free Software Foundation, either version 2 of the License, or
+#  (at your option) any later version.
+#
+#  OpenELEC is distributed in the hope that it will be useful,
+#  but WITHOUT ANY WARRANTY; without even the implied warranty of
+#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#  GNU General Public License for more details.
+#
+#  You should have received a copy of the GNU General Public License
+#  along with OpenELEC.  If not, see <http://www.gnu.org/licenses/>.
+################################################################################
+
+[ -z "$SYSTEM_ROOT" ] && SYSTEM_ROOT=""
+[ -z "$BOOT_ROOT" ] && BOOT_ROOT="/flash"
+[ -z "$BOOT_PART" ] && BOOT_PART=$(df "$BOOT_ROOT" | tail -1 | awk {' print $1 '})
+if [ -z "$BOOT_DISK" ]; then
+  case $BOOT_PART in
+    /dev/sd[a-z][0-9]*)
+      BOOT_DISK=$(echo $BOOT_PART | sed -e "s,[0-9]*,,g")
+      ;;
+    /dev/mmcblk*)
+      BOOT_DISK=$(echo $BOOT_PART | sed -e "s,p[0-9]*,,g")
+      ;;
+  esac
+fi
+
+# mount $BOOT_ROOT r/w
+  mount -o remount,rw $BOOT_ROOT
+
+# update Device Tree Blobs
+  for all_dtb in /flash/*.dtb /flash/DTB; do
+    dtb=$(basename $all_dtb)
+    if [ -f $SYSTEM_ROOT/usr/share/bootloader/$dtb ]; then
+      echo "*** updating Device Tree Blob: $dtb ..."
+      cp -p $SYSTEM_ROOT/usr/share/bootloader/$dtb $BOOT_ROOT
+    fi
+  done
+
+# stop if on eMMC that won't accept the new bootloader
+if [ -f /sys/block/${BOOT_DISK}boot0/force_ro ]; then
+  emmc=1
+  D="eMMC"
+  device=/dev/${BOOT_DISK}boot0
+  if ! echo 0 > /sys/block/${BOOT_DISK}boot0/force_ro; then
+    msgbox "I've found a running eMMC but I couldn't get it to accept the new bootloaders."
+    exit
+  fi
+fi
+
+echo "*** updating u-boot for Odroid on: $BOOT_DISK ..."
+if [ -n "${emmc}" ]; then
+  dd bs=512 if=$SYSTEM_ROOT/usr/share/bootloader/bl1 of=$BOOT_DISK seek=0
+  dd bs=512 if=$SYSTEM_ROOT/usr/share/bootloader/bl2 of=$BOOT_DISK seek=30
+  dd bs=512 if=$SYSTEM_ROOT/usr/share/bootloader/u-boot of=$BOOT_DISK seek=62
+  dd bs=512 if=$SYSTEM_ROOT/usr/share/bootloader/tzsw of=$BOOT_DISK seek=2110
+else
+  dd bs=512 if=$SYSTEM_ROOT/usr/share/bootloader/bl1 of=$BOOT_DISK seek=1
+  dd bs=512 if=$SYSTEM_ROOT/usr/share/bootloader/bl2 of=$BOOT_DISK seek=31
+  dd bs=512 if=$SYSTEM_ROOT/usr/share/bootloader/u-boot of=$BOOT_DISK seek=63
+  dd bs=512 if=$SYSTEM_ROOT/usr/share/bootloader/tzsw of=$BOOT_DISK seek=2111
+fi
+
+# mount $BOOT_ROOT r/o
+  sync
+  mount -o remount,ro $BOOT_ROOT
diff --git a/packages/tools/u-boot/scripts/update.sh b/packages/tools/u-boot/scripts/update.sh
old mode 100755
new mode 100644
diff --git a/packages/x11/driver/xf86-video-armsoc/config/xorg-armsoc.conf b/packages/x11/driver/xf86-video-armsoc/config/xorg-armsoc.conf
new file mode 100644
index 0000000..e1fb459
--- /dev/null
+++ b/packages/x11/driver/xf86-video-armsoc/config/xorg-armsoc.conf
@@ -0,0 +1,32 @@
+Section "Device"
+    Identifier     "ARMSoC Device"
+    Driver         "armsoc"
+
+    Option         "fbdev"        "/dev/fb0"
+    Option         "Debug"        "false"
+    Option         "DPMS"         "false
+EndSection
+
+Section "Screen"
+    Identifier     "ARMSoC Screen"
+    Device         "ARMSoC Device"
+    DefaultDepth   24
+    Option         "ColorRange"   "Full"
+EndSection
+
+Section "ServerLayout"
+    Identifier     "ARMSoC Layout"
+    Option         "Blanktime"    "0"
+    Option         "StandbyTime"  "0"
+    Option         "SuspendTime"  "0"
+    Option         "OffTime"      "0"
+EndSection
+
+Section "Extensions"
+    Option         "Composite"    "false"
+EndSection
+
+Section "DRI"
+    Mode           0666
+EndSection
+
diff --git a/packages/x11/driver/xf86-video-armsoc/package.mk b/packages/x11/driver/xf86-video-armsoc/package.mk
new file mode 100644
index 0000000..efcccbf
--- /dev/null
+++ b/packages/x11/driver/xf86-video-armsoc/package.mk
@@ -0,0 +1,41 @@
+################################################################################
+#      This file is part of OpenELEC - http://www.openelec.tv
+#      Copyright (C) 2009-2014 Stephan Raue (stephan@openelec.tv)
+#
+#  OpenELEC is free software: you can redistribute it and/or modify
+#  it under the terms of the GNU General Public License as published by
+#  the Free Software Foundation, either version 2 of the License, or
+#  (at your option) any later version.
+#
+#  OpenELEC is distributed in the hope that it will be useful,
+#  but WITHOUT ANY WARRANTY; without even the implied warranty of
+#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#  GNU General Public License for more details.
+#
+#  You should have received a copy of the GNU General Public License
+#  along with OpenELEC.  If not, see <http://www.gnu.org/licenses/>.
+################################################################################
+
+PKG_NAME="xf86-video-armsoc"
+PKG_VERSION="3.1.0-rc1"
+PKG_REV="1"
+PKG_ARCH="arm"
+PKG_LICENSE="OSS"
+PKG_SITE="https://github.com/endlessm/xf86-video-armsoc"
+PKG_URL="https://github.com/endlessm/xf86-video-armsoc/archive/Release_${PKG_VERSION}.tar.gz"
+PKG_DEPENDS_TARGET="toolchain util-macros xorg-server"
+PKG_NEED_UNPACK="$LINUX_DEPENDS"
+PKG_SECTION="x11/driver"
+PKG_SHORTDESC="xf86-video-armsoc: The Xorg driver for some ARM video chips"
+PKG_LONGDESC="The Xorg driver for some ARM video chips"
+PKG_SOURCE_DIR="${PKG_NAME}-Release_${PKG_VERSION}"
+
+PKG_IS_ADDON="no"
+PKG_AUTORECONF="yes"
+
+PKG_CONFIGURE_OPTS_TARGET="--with-xorg-module-dir=$XORG_PATH_MODULES --with-drmmode=exynos"
+
+post_makeinstall_target() {
+  mkdir -p $INSTALL/etc/X11/xorg.conf.d
+    cp $PKG_DIR/config/*.conf $INSTALL/etc/X11/xorg.conf.d/20-armsoc.conf
+}
diff --git a/packages/x11/driver/xf86-video-armsoc/patches/xf86-video-armsoc-0000-update-compat-api.h-xorg-1.19.X.patch b/packages/x11/driver/xf86-video-armsoc/patches/xf86-video-armsoc-0000-update-compat-api.h-xorg-1.19.X.patch
new file mode 100644
index 0000000..49c601b
--- /dev/null
+++ b/packages/x11/driver/xf86-video-armsoc/patches/xf86-video-armsoc-0000-update-compat-api.h-xorg-1.19.X.patch
@@ -0,0 +1,52 @@
+---
+ src/compat-api.h |   17 +++++++++++++++++
+ 1 file changed, 17 insertions(+)
+
+--- a/src/compat-api.h
++++ b/src/compat-api.h
+@@ -28,6 +28,8 @@
+ #ifndef COMPAT_API_H
+ #define COMPAT_API_H
+ 
++#include <xf86Module.h>
++
+ #ifndef GLYPH_HAS_GLYPH_PICTURE_ACCESSOR
+ #define GetGlyphPicture(g, s) GlyphPicture((g))[(s)->myNum]
+ #define SetGlyphPicture(g, s, p) GlyphPicture((g))[(s)->myNum] = p
+@@ -38,6 +40,10 @@
+ #define xf86ScrnToScreen(s) screenInfo.screens[(s)->scrnIndex]
+ #endif
+ 
++#if GET_ABI_MAJOR(ABI_VIDEODRV_VERSION) >= 22
++#define HAVE_NOTIFY_FD 1
++#endif
++
+ #ifndef XF86_SCRN_INTERFACE
+ 
+ #define SCRN_ARG_TYPE int
+@@ -77,9 +83,15 @@
+ 
+ #define SCREEN_INIT_ARGS_DECL ScreenPtr pScreen, int argc, char **argv
+ 
++#if ABI_VIDEODRV_VERSION >= SET_ABI_VERSION(23, 0)
++#define RELOAD_CURSORS_DEPRECATED 1
++#define BLOCKHANDLER_ARGS_DECL ScreenPtr arg, pointer pTimeout
++#define BLOCKHANDLER_ARGS arg, pTimeout
++#else
+ #define BLOCKHANDLER_ARGS_DECL \
+ 	ScreenPtr arg, pointer pTimeout, pointer pReadmask
+ #define BLOCKHANDLER_ARGS arg, pTimeout, pReadmask
++#endif
+ 
+ #define CLOSE_SCREEN_ARGS_DECL ScreenPtr pScreen
+ #define CLOSE_SCREEN_ARGS pScreen
+@@ -100,4 +112,9 @@
+ 
+ #endif
+ 
++#if !HAVE_NOTIFY_FD
++#define SetNotifyFd(fd, cb, mode, data) AddGeneralSocket(fd);
++#define RemoveNotifyFd(fd) RemoveGeneralSocket(fd)
++#endif
++
+ #endif
diff --git a/packages/x11/driver/xf86-video-armsoc/patches/xf86-video-armsoc-0001-compilation-fixes.patch b/packages/x11/driver/xf86-video-armsoc/patches/xf86-video-armsoc-0001-compilation-fixes.patch
new file mode 100644
index 0000000..64be4be
--- /dev/null
+++ b/packages/x11/driver/xf86-video-armsoc/patches/xf86-video-armsoc-0001-compilation-fixes.patch
@@ -0,0 +1,69 @@
+---
+ src/drmmode_display.c |   24 +++++++++++++++++++++++-
+ 1 file changed, 23 insertions(+), 1 deletion(-)
+
+--- a/src/drmmode_display.c
++++ b/src/drmmode_display.c
+@@ -450,9 +450,11 @@ done_setting:
+ 		drmmode_output_dpms(output, DPMSModeOn);
+ 	}
+ 
++	#ifndef RELOAD_CURSORS_DEPRECATED
+ 	/* if hw cursor is initialized, reload it */
+ 	if (drmmode->cursor)
+ 		xf86_reload_cursors(pScrn->pScreen);
++	#endif
+ 
+ cleanup:
+ 	if (newcrtc)
+@@ -2038,6 +2040,16 @@ drmmode_uevent_fini(ScrnInfoPtr pScrn)
+ 	TRACE_EXIT();
+ }
+ 
++#if HAVE_NOTIFY_FD
++static void
++drmmode_notify_fd(int fd, int notify, void *data)
++{
++	ScrnInfoPtr pScrn = data;
++	struct drmmode_rec *drmmode;
++	drmmode = drmmode_from_scrn(pScrn);
++	drmHandleEvent(drmmode->fd, &event_context);
++}
++#else
+ static void
+ drmmode_wakeup_handler(pointer data, int err, pointer p)
+ {
+@@ -2053,6 +2065,7 @@ drmmode_wakeup_handler(pointer data, int
+ 	if (FD_ISSET(drmmode->fd, read_mask))
+ 		drmHandleEvent(drmmode->fd, &event_context);
+ }
++#endif
+ 
+ void
+ drmmode_wait_for_event(ScrnInfoPtr pScrn)
+@@ -2068,15 +2081,24 @@ drmmode_screen_init(ScrnInfoPtr pScrn)
+ 
+ 	drmmode_uevent_init(pScrn);
+ 
+-	AddGeneralSocket(drmmode->fd);
++	SetNotifyFd(drmmode->fd, drmmode_notify_fd, X_NOTIFY_READ, pScrn);
+ 
++	#ifndef HAVE_NOTIFY_FD
+ 	/* Register a wakeup handler to get informed on DRM events */
+ 	RegisterBlockAndWakeupHandlers((BlockHandlerProcPtr)NoopDDA,
+ 			drmmode_wakeup_handler, pScrn);
++	#endif
+ }
+ 
+ void
+ drmmode_screen_fini(ScrnInfoPtr pScrn)
+ {
++	struct drmmode_rec *drmmode = drmmode_from_scrn(pScrn);
++	#ifndef HAVE_NOTIFY_FD
++	/* Unregister wakeup handler */
++	RemoveBlockAndWakeupHandlers((BlockHandlerProcPtr)NoopDDA,
++	                             drmmode_wakeup_handler, pScrn);
++	#endif
++	RemoveNotifyFd(drmmode->fd);
+ 	drmmode_uevent_fini(pScrn);
+ }
diff --git a/packages/x11/driver/xf86-video-armsoc/patches/xf86-video-armsoc-0002-fix-a-segfault-when-switching-VT.patch b/packages/x11/driver/xf86-video-armsoc/patches/xf86-video-armsoc-0002-fix-a-segfault-when-switching-VT.patch
new file mode 100644
index 0000000..ecbaa2e
--- /dev/null
+++ b/packages/x11/driver/xf86-video-armsoc/patches/xf86-video-armsoc-0002-fix-a-segfault-when-switching-VT.patch
@@ -0,0 +1,24 @@
+---
+ src/armsoc_driver.c |    4 ++--
+ 1 file changed, 2 insertions(+), 2 deletions(-)
+
+--- a/src/armsoc_driver.c
++++ b/src/armsoc_driver.c
+@@ -1334,7 +1334,7 @@ ARMSOCEnterVT(VT_FUNC_ARGS_DECL)
+ 	TRACE_ENTER();
+ 
+ 	for (i = 1; i < currentMaxClients; i++) {
+-		if (clients[i])
++		if (clients[i] && !clients[i]->clientGone)
+ 			AttendClient(clients[i]);
+ 	}
+ 
+@@ -1369,7 +1369,7 @@ ARMSOCLeaveVT(VT_FUNC_ARGS_DECL)
+ 	TRACE_ENTER();
+ 
+ 	for (i = 1; i < currentMaxClients; i++) {
+-		if (clients[i])
++		if (clients[i] && !clients[i]->clientGone)
+ 			IgnoreClient(clients[i]);
+ 	}
+ 
diff --git a/packages/x11/driver/xf86-video-armsoc/patches/xf86-video-armsoc-0003-fix-all-calloc-syntax-mistakes.patch b/packages/x11/driver/xf86-video-armsoc/patches/xf86-video-armsoc-0003-fix-all-calloc-syntax-mistakes.patch
new file mode 100644
index 0000000..1cb6ab3
--- /dev/null
+++ b/packages/x11/driver/xf86-video-armsoc/patches/xf86-video-armsoc-0003-fix-all-calloc-syntax-mistakes.patch
@@ -0,0 +1,67 @@
+---
+ src/armsoc_exa.c      |    3 +--
+ src/armsoc_exa_null.c |    2 +-
+ src/drmmode_display.c |    8 ++++----
+ 3 files changed, 6 insertions(+), 7 deletions(-)
+
+--- a/src/armsoc_exa.c
++++ b/src/armsoc_exa.c
+@@ -164,8 +164,7 @@ ARMSOCCreatePixmap2(ScreenPtr pScreen, i
+ 		int depth, int usage_hint, int bitsPerPixel,
+ 		int *new_fb_pitch)
+ {
+-	struct ARMSOCPixmapPrivRec *priv =
+-				calloc(sizeof(struct ARMSOCPixmapPrivRec), 1);
++	struct ARMSOCPixmapPrivRec *priv = calloc(1, sizeof(struct ARMSOCPixmapPrivRec));
+ 	ScrnInfoPtr pScrn = xf86ScreenToScrn(pScreen);
+ 	struct ARMSOCRec *pARMSOC = ARMSOCPTR(pScrn);
+ 
+--- a/src/armsoc_exa_null.c
++++ b/src/armsoc_exa_null.c
+@@ -109,7 +109,7 @@ Bool InstallAlphaHack(ScreenPtr pScreen)
+ struct ARMSOCEXARec *
+ InitNullEXA(ScreenPtr pScreen, ScrnInfoPtr pScrn, int fd)
+ {
+-	struct ARMSOCNullEXARec *null_exa = calloc(sizeof(*null_exa), 1);
++	struct ARMSOCNullEXARec *null_exa = calloc(1, sizeof(*null_exa));
+ 	struct ARMSOCEXARec *armsoc_exa;
+ 	ExaDriverPtr exa;
+ 
+--- a/src/drmmode_display.c
++++ b/src/drmmode_display.c
+@@ -341,7 +341,7 @@ drmmode_set_mode_major(xf86CrtcPtr crtc,
+ 	crtc->y = y;
+ 	crtc->rotation = rotation;
+ 
+-	output_ids = calloc(sizeof(uint32_t), xf86_config->num_output);
++	output_ids = calloc(xf86_config->num_output, sizeof(uint32_t));
+ 	if (!output_ids) {
+ 		ERROR_MSG(
+ 				"memory allocation failed in drmmode_set_mode_major()");
+@@ -991,7 +991,7 @@ drmmode_crtc_init(ScrnInfoPtr pScrn, str
+ 	if (crtc == NULL)
+ 		return;
+ 
+-	drmmode_crtc = xnfcalloc(sizeof(struct drmmode_crtc_private_rec), 1);
++	drmmode_crtc = xnfcalloc(1, sizeof(struct drmmode_crtc_private_rec));
+ 	drmmode_crtc->crtc_id = drmmode->mode_res->crtcs[num];
+ 	drmmode_crtc->drmmode = drmmode;
+ 	drmmode_crtc->last_good_mode = NULL;
+@@ -1510,7 +1510,7 @@ drmmode_output_init(ScrnInfoPtr pScrn, s
+ 	if (!connector)
+ 		goto exit;
+ 
+-	encoders = calloc(sizeof(drmModeEncoderPtr), connector->count_encoders);
++	encoders = calloc(connector->count_encoders, sizeof(drmModeEncoderPtr));
+ 	if (!encoders)
+ 		goto free_connector_exit;
+ 
+@@ -1529,7 +1529,7 @@ drmmode_output_init(ScrnInfoPtr pScrn, s
+ 	if (!output)
+ 		goto free_encoders_exit;
+ 
+-	drmmode_output = calloc(sizeof(struct drmmode_output_priv), 1);
++	drmmode_output = calloc(1, sizeof(struct drmmode_output_priv));
+ 	if (!drmmode_output) {
+ 		xf86OutputDestroy(output);
+ 		goto free_encoders_exit;
diff --git a/packages/x11/driver/xf86-video-armsoc/udev.d/50-mali.rules b/packages/x11/driver/xf86-video-armsoc/udev.d/50-mali.rules
new file mode 100644
index 0000000..d973c8c
--- /dev/null
+++ b/packages/x11/driver/xf86-video-armsoc/udev.d/50-mali.rules
@@ -0,0 +1,3 @@
+KERNEL=="mali", MODE="0777", GROUP="video"
+KERNEL=="ump", MODE="0777", GROUP="video"
+KERNEL=="umplock", MODE="0777", GROUP="video"
diff --git a/packages/x11/lib/libXfixes/package.mk b/packages/x11/lib/libXfixes/package.mk
index 87edcd1..27f95eb 100644
--- a/packages/x11/lib/libXfixes/package.mk
+++ b/packages/x11/lib/libXfixes/package.mk
@@ -31,7 +31,11 @@ PKG_LONGDESC="X Fixes Library"
 PKG_IS_ADDON="no"
 PKG_AUTORECONF="no"
 
-PKG_CONFIGURE_OPTS_TARGET="--enable-static --disable-shared"
+if [ "$OPENGLES" = "opengl-mali" ]; then
+  PKG_CONFIGURE_OPTS_TARGET="--enable-static --enable-shared"
+else
+  PKG_CONFIGURE_OPTS_TARGET="--enable-static --disable-shared"
+fi
 
 pre_configure_target() {
   export CFLAGS="$CFLAGS -fPIC"
